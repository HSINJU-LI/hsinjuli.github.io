# install.packages("devtools")
# install.packages("magicfor")
library("devtools")
library("magicfor")
install.packages("magicfor")
library("magicfor")
magic_for(print, silent = TRUE)
for (J in 1:365) {  # J: Julian day
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0)
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi
print(surfaceR, R_raw, Zenith)
}
R_MC_2018 <- magic_result_as_dataframe()
R_MC_2018
View(R_MC_2018)
plot(R_MC_2018$J)
plot(R_MC_2018$J)
plot(R_MC_2018$Zenith)
time
plot(R_MC_2018$Zenith[500:600])
R_MC_2018
R_MC_2018[R_MC_2018$J==1,]
plot(R_MC_2018$Zenith[R_MC_2018$J==1,])
R_MC_2018$Zenith[R_MC_2018$J==1,]
R_MC_2018[R_MC_2018$J==1,]
R_MC_2018[R_MC_2018$J==1,]$Zenith
plot(R_MC_2018[R_MC_2018$J==1,]$Zenith)
plot(sort(R_MC_2018[R_MC_2018$J==1,]$Zenith))
time
h
for (J in 1:365) {  # J: Julian day
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) #direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ #diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi #Solar zenith angle
print(Zenith)
}
Zenith
m
for (J in 1:365) {  # J: Julian day
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
print(delta)
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) #direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ #diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi #Solar zenith angle
print(Zenith)
}
J<-1
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
print(delta)
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) #direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ #diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi #Solar zenith angle
Zenith
print(Zenith)
plot(Zenith)
plot(surfaceR)
plot(R_raw)
for (J in 1:365) {
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) # direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ # diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi
# Save as named vector
results_list[[J]] <- c(JulianDay = J, Zenith = Zenith, R_top = R_top, Direct = direct, Diffuse = diff, SurfaceR = surfaceR)
}
# Combine into data.frame (transpose needed)
results_df <- as.data.frame(do.call(cbind, results_list))
results_df <- as.data.frame(t(results_df))
results_list <- vector("list", 365)
for (J in 1:365) {
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) # direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ # diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi
# Save as named vector
results_list[[J]] <- c(JulianDay = J, Zenith = Zenith, R_top = R_top, Direct = direct, Diffuse = diff, SurfaceR = surfaceR)
}
# Combine into data.frame (transpose needed)
results_df <- as.data.frame(do.call(cbind, results_list))
results_df <- as.data.frame(t(results_df))
results_df
results_df
results_list
for (J in 1:365) {
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) # direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ # diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi
# Save as named vector
results_list[[J]] <- c(JulianDay = J, Zenith = Zenith, R_top = R_top, Direct = direct, Diffuse = diff, SurfaceR = surfaceR)
}
results_list
results_list
satellite_t
Zenith
results_list
results_list[[1]]
satellite_t <- read.csv("satelliteIndex2018.csv") # sky clearness index for each day
colnames(satellite_t) <- c("Y", "m", "d", "all_sky", "Clearness")
satellite_t[satellite_t$Clearness < 0, ] <- 0.7 # default extreme value to 0.7 (clear)
#Sets latitude/longitude, time steps, and constants like solar constant (1367 W/mÂ²).
UTC <- 8  # local time zone
Std_long <- UTC * 180 / 12
s0 <- 1367  # solar constant
P_MC <- 88.86  # atmospheric pressure of your ROI
P <- P_MC
lat <- 24.65
long <- 121.47
time <- seq(0, 24, 1/30)  # 2-minute interval
time <- time[1:720]
results_list <- vector("list", 365)
for (J in 1:365) {
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) # direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ # diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi
# Save as named vector
results_list[[J]] <- c(JulianDay = J, Zenith = Zenith, R_top = R_top, Direct = direct, Diffuse = diff, SurfaceR = surfaceR)
}
# Combine into data.frame (transpose needed)
results_df <- as.data.frame(do.call(cbind, results_list))
results_df
# Combine into data.frame (transpose needed)
results_df <- as.data.frame(do.call(cbind, results_list))
results_df <- as.data.frame(t(results_df))
results_df
View(results_df)
head(results_df)
results_df[1,]
plot(results_df[1,])
results_df[1,]
length(results_df[1,])
length(results_df[,1])
results_Zenith <- vector("list", 365)
results_R_raw <- vector("list", 365)
results_SurfaceR <- vector("list", 365)
for (J in 1:365) {
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) # direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ # diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi
# Save as named vector
results_Zenith[[J]] <- c(JulianDay = J, Zenith = Zenith)
results_R_raw[[J]] <- c(JulianDay = J, R_raw = R_raw)
results_SurfaceR[[J]] <- c(JulianDay = J, SurfaceR = surfaceR)
}
# Combine into data.frame (transpose needed)
results_Zenith_df <- as.data.frame(do.call(cbind, results_Zenith))
results_Zenith_df <- as.data.frame(t(results_Zenith_df)) #col: 2 min interval; row: day
results_R_raw_df <- as.data.frame(do.call(cbind, results_R_raw))
results_R_raw_df <- as.data.frame(t(results_R_raw_df)) #col: 2 min interval; row: day
results_SurfaceR_df <- as.data.frame(do.call(cbind, results_SurfaceR))
results_SurfaceR_df <- as.data.frame(t(results_SurfaceR_df)) #col: 2 min interval; row: day
results_Zenith_df
results_Zenith_df[1,]
plot(results_Zenith_df[1,])
value(results_Zenith_df[1,])
results_Zenith_df
as.numeric(results_Zenith_df)
as.numeric(unlist(results_Zenith_df))
# Combine into data.frame (transpose needed)
results_Zenith_df <- as.data.frame(do.call(cbind, results_Zenith))
results_Zenith_df <- as.numeric(unlist(t(results_Zenith_df)))  #col: 2 min interval; row: day
results_Zenith_df
# Combine into data.frame (transpose needed)
results_Zenith_df <- as.data.frame(do.call(cbind, results_Zenith))
results_Zenith_df
plot(results_Zenith_df[1,])
value(results_Zenith_df[1,])
results_Zenith_df
for (J in 1:365) {
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) # direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ # diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi
print(surfaceR, R_raw, Zenith)
}
# Combine into data.frame (transpose needed)
R_MC_2018 <- magic_result_as_dataframe()
magic_for(print, silent = TRUE) #store the for loop results
for (J in 1:365) {  # J: Julian day
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) #direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ #diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi #Solar zenith angle
print(surfaceR, R_raw, Zenith)
}
R_MC_2018 <- magic_result_as_dataframe()
R_MC_2018
time
720*365
head(R_MC_2018)
rep(1:365, each = length(time))
c(rep(1:365, each = length(time)), rep(time_values, times = 365))
c(rep(1:365, each = length(time)), rep(time, times = 365))
cbind(rep(1:365, each = length(time)), rep(time, times = 365))
JulianD<-rep(1:365, each = length(time))
tinterval<-rep(time, times = 365)
cbind(JulianD, tinterval)
mydt<-cbind(JulianD, tinterval)
head(mydt)
mydt<-as.data.frame(cbind(JulianD, tinterval))
R_MC_2018 <- c(mydt$JulianD,mydt$tinterval,R_MC_2018$surfaceR, R_MC_2018$R_raw, R_MC_2018$Zenith)
R_MC_2018 <- c(mydt$JulianD,mydt$tinterval,R_MC_2018$surfaceR, R_MC_2018$R_raw, R_MC_2018$Zenith)
head(R_MC_2018)
R_MC_2018
magic_for(print, silent = TRUE) #store the for loop results
for (J in 1:365) {  # J: Julian day
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) #direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ #diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi #Solar zenith angle
print(surfaceR, R_raw, Zenith)
}
R_MC_2018 <- magic_result_as_dataframe()
R_MC_2018
head(R_MC_2018)
R_MC_2018 <- c(mydt$JulianD,mydt$tinterval,R_MC_2018$surfaceR, R_MC_2018$R_raw, R_MC_2018$Zenith)
R_MC_2018
head(R_MC_2018)
for (J in 1:365) {  # J: Julian day
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) #direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ #diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi #Solar zenith angle
print(surfaceR, R_raw, Zenith)
}
R_MC_2018 <- magic_result_as_dataframe()
R_MC_2018 <- cbind(mydt$JulianD,mydt$tinterval,R_MC_2018$surfaceR, R_MC_2018$R_raw, R_MC_2018$Zenith)
R_MC_2018
for (J in 1:365) {  # J: Julian day
delta <- asin(0.39785 * sin((278.97 + 0.9856 * J + 1.9165 * sin((356.6 + 0.9856 * J) * pi / 180)) * pi / 180)) * 180 / pi
f <- (279.575 + 0.9856 * J) * pi / 180
ET <- (-104.7 * sin(f) + 596.2 * sin(2 * f) + 4.3 * sin(3 * f) - 12.7 * sin(4 * f) - 429.3 * cos(f) - 2 * cos(2 * f) + 19.3 * cos(3 * f)) / 3600
t0 <- 12 - ((long - Std_long) / 15) - ET
a1 <- 360 * (J / 365) * pi / 180
a2 <- 1.00011 + 0.034221 * cos(a1) + 0.00128 * sin(a1) + 0.000719 * cos(2 * a1) + 0.000077 * sin(2 * a1)
R_top <- s0 * a2
h <- (time - t0) * 15
cosZ <- sin(lat * pi / 180) * sin(delta * pi / 180) + cos(lat * pi / 180) * cos(delta * pi / 180) * cos(h * pi / 180)
m <- pmax(P / 101.3 / cosZ, 0)
R_raw <- pmax(R_top * cosZ, 0)
direct <- pmax(R_top * satellite_t$Clearness[J]^m * cosZ, 0) #direct solar radiation
diff <- 0.3 * R_top * (1 - satellite_t$Clearness[J]^m) * cosZ #diffuse solar radiation
surfaceR <- direct + diff
Zenith <- acos(cosZ) * 180 / pi #Solar zenith angle
print(surfaceR, R_raw, Zenith)
}
R_MC_2018 <- magic_result_as_dataframe()
type(R_MC_2018)
class(R_MC_2018)
head(R_MC_2018$surfaceR,)
head(R_MC_2018$surfaceR)
R_MC_2018 <- data.frame(J = mydt$JulianD,time = mydt$tinterval, raw_R = R_MC_2018$R_raw, surface_R = R_MC_2018$surfaceR, Zenith = R_MC_2018$Zenith)
head(R_MC_2018)
R_MC_2018[R_MC_2018$J==1]
R_MC_2018$Zenith[R_MC_2018$J==1]
plot(R_MC_2018$Zenith[R_MC_2018$J==1])
plot(R_MC_2018$raw_R[R_MC_2018$J==1])
plot(R_MC_2018$surface_R[R_MC_2018$J==1])
# Plot raw_R first
plot(R_MC_2018$raw_R[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time Index", main = "Raw vs Surface Radiation")
# Add surface_R on the same plot
lines(R_MC_2018$surface_R[R_MC_2018$J == 1], col = "red")
# Optional: add a legend
legend("topright", legend = c("Raw R", "Surface R"),
col = c("blue", "red"), lty = 1)
time
R_MC_2018
# Plot raw_R first
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$raw_R[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time Index", main = "Raw vs Surface Radiation")
# Plot raw_R first
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$raw_R[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time(hours)", main = "Raw vs Surface Radiation")
# Add surface_R on the same plot
lines(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$surface_R[R_MC_2018$J == 1], col = "red")
# Optional: add a legend
legend("topright", legend = c("Raw R", "Surface R"),
col = c("blue", "red"), lty = 1)
# Plot raw_R first
plot(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$raw_R[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time(hours)", main = "Raw vs Surface Radiation")
# Add surface_R on the same plot
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$surface_R[R_MC_2018$J == 1], col = "red")
# Optional: add a legend
legend("topright", legend = c("Raw R", "Surface R"),
col = c("blue", "red"), lty = 1)
# Plot raw_R first
plot(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$raw_R[R_MC_2018$J == 210], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time(hours)", main = "Raw vs Surface Radiation")
# Add surface_R on the same plot
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$surface_R[R_MC_2018$J == 210], col = "red")
# Optional: add a legend
legend("topright", legend = c("Raw R", "Surface R"),
col = c("blue", "red"), lty = 1)
# Set up side-by-side plots
par(mfrow = c(1, 2))  # 1 row, 2 columns
# Plot for J = 1
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$raw_R[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time (hours)", main = "Julian Day 1")
lines(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$surface_R[R_MC_2018$J == 1], col = "red")
legend("topright", legend = c("Raw R", "Surface R"), col = c("blue", "red"), lty = 1, cex = 0.8)
# Plot for J = 210
plot(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$raw_R[R_MC_2018$J == 210], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time (hours)", main = "Julian Day 210")
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$surface_R[R_MC_2018$J == 210], col = "red")
# Base plot: raw_R for J = 1
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$raw_R[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time (hours)", main = "Raw vs Surface Radiation (J=1 & J=210)",
ylim = range(c(R_MC_2018$raw_R, R_MC_2018$surface_R), na.rm = TRUE))  # adjust y-axis to fit all
# Add surface_R for J = 1
lines(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$surface_R[R_MC_2018$J == 1], col = "red")
# Add raw_R for J = 210
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$raw_R[R_MC_2018$J == 210], col = "blue", lty = 2)
# Add surface_R for J = 210
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$surface_R[R_MC_2018$J == 210], col = "red", lty = 2)
# Add legend
legend("topright", legend = c("Raw R (J=1)", "Surface R (J=1)", "Raw R (J=210)", "Surface R (J=210)"),
col = c("blue", "red", "blue", "red"), lty = c(1, 1, 2, 2), cex = 0.8)
# Reset to default layout
par(mfrow = c(1, 1))
# Base plot: raw_R for J = 1
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$raw_R[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Radiation", xlab = "Time (hours)", main = "Raw vs Surface Radiation (J=1 & J=210)",
ylim = range(c(R_MC_2018$raw_R, R_MC_2018$surface_R), na.rm = TRUE))  # adjust y-axis to fit all
# Add surface_R for J = 1
lines(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$surface_R[R_MC_2018$J == 1], col = "red")
# Add raw_R for J = 210
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$raw_R[R_MC_2018$J == 210], col = "blue", lty = 2)
# Add surface_R for J = 210
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$surface_R[R_MC_2018$J == 210], col = "red", lty = 2)
# Add legend
legend("topright", legend = c("Raw R (J=1)", "Surface R (J=1)", "Raw R (J=210)", "Surface R (J=210)"),
col = c("blue", "red", "blue", "red"), lty = c(1, 1, 2, 2), cex = 0.8)
# plot 2
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$Zenith[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Zenith", xlab = "Time (hours)", main = "Zenith angle (J=1 & J=210)",
na.rm = TRUE))  # adjust y-axis to fit all
# plot 2
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$Zenith[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Zenith", xlab = "Time (hours)", main = "Zenith angle (J=1 & J=210)", na.rm = TRUE))  # adjust y-axis to fit all
# plot 2
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$Zenith[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Zenith", xlab = "Time (hours)", main = "Zenith angle (J=1 & J=210)", na.rm = TRUE)  # adjust y-axis to fit all
# plot 2
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$Zenith[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Zenith", xlab = "Time (hours)", main = "Zenith angle (J=1 & J=210)")  # adjust y-axis to fit all
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$Zenith[R_MC_2018$J == 210], col = "red")
# plot 2
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$Zenith[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Zenith", xlab = "Time (hours)", main = "Zenith angle (J=1 & J=210)",
ylim = range(c(R_MC_2018$Zenith), na.rm = TRUE))  # adjust y-axis to fit all
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$Zenith[R_MC_2018$J == 210], col = "red")
legend("topright", legend = c("J=1", "J=210"),
col = c("blue", "red"), lty = c(1, 2), cex = 0.8)
legend("bottomright", legend = c("J=1", "J=210"),
col = c("blue", "red"), lty = c(1, 2), cex = 0.8)
# plot 2
plot(R_MC_2018$time[R_MC_2018$J == 1], R_MC_2018$Zenith[R_MC_2018$J == 1], type = "l", col = "blue",
ylab = "Zenith", xlab = "Time (hours)", main = "Zenith angle (J=1 & J=210)",
ylim = range(c(R_MC_2018$Zenith), na.rm = TRUE))  # adjust y-axis to fit all
lines(R_MC_2018$time[R_MC_2018$J == 210], R_MC_2018$Zenith[R_MC_2018$J == 210], col = "red")
legend("bottomright", legend = c("J=1", "J=210"),
col = c("blue", "red"), lty = c(1, 2), cex = 0.8)
